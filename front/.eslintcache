[{"/Users/diegoburgos/Desktop/front/src/index.js":"1","/Users/diegoburgos/Desktop/front/src/reportWebVitals.js":"2","/Users/diegoburgos/Desktop/front/src/App.js":"3","/Users/diegoburgos/Desktop/front/src/views/Home.js":"4","/Users/diegoburgos/Desktop/front/src/components/nav.js":"5","/Users/diegoburgos/Desktop/front/src/views/Crawler.js":"6"},{"size":574,"mtime":1701911833848,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1611356257000,"results":"9","hashOfConfig":"8"},{"size":573,"mtime":1701916105097,"results":"10","hashOfConfig":"8"},{"size":5493,"mtime":1701915667486,"results":"11","hashOfConfig":"8"},{"size":507,"mtime":1701916072364,"results":"12","hashOfConfig":"8"},{"size":5567,"mtime":1701915801060,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1rhnrts",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/Users/diegoburgos/Desktop/front/src/index.js",[],["29","30"],"/Users/diegoburgos/Desktop/front/src/reportWebVitals.js",[],"/Users/diegoburgos/Desktop/front/src/App.js",[],"/Users/diegoburgos/Desktop/front/src/views/Home.js",["31","32","33"],"import React, { useState, useEffect, useRef } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Home.css';\n\nfunction Home() {\n\n    const [searchResult, setSearchResult] = useState([]);\n    const [search, setSearch] = useState('');\n    const [expandWords, setExpandWords] = useState([]);\n    const [suggests, setSuggests] = useState([]);\n    const [spell, setSpell] = useState([]);\n\n    const fetchSearch = async (search) => {\n        let data;\n        try {\n            //si no hay palabra presente todo muere\n            if(!search){\n                setSpell([]);\n                setExpandWords([]);\n                setSearchResult([]);\n                return;\n            }\n            //consulta la corrección de palabras\n            let spell_words = await fetch('http://localhost:8983/solr/briwtest/spell?q=' + search);\n            let _spell = await spell_words.json();\n            console.log(_spell);\n            //verifica la existencia de sugerencias y actualiza el estado\n            if(_spell.spellcheck){\n                setSpell(_spell.spellcheck.suggestions.length ? _spell.spellcheck.suggestions[1].suggestion : []);\n            }else{\n                setSpell([]);\n            }\n            //expande las busqueda \n            let expand_words = await fetch('https://api.datamuse.com/words?ml=' + search + '&v=es&max=10');\n            let words = await expand_words.json()\n            setExpandWords(words ? words : [])\n            let expand_search = search;\n            for (let index = 0; index < words.length; index++) {\n                expand_search = expand_search + \" OR \" + words[index].word;\n\n            }\n            console.log(expand_search ? expand_search : []);\n\n            //realiza la busqueda de las palabras expandidas\n            data = await fetch('http://localhost:8983/solr/briwtest/select?rows=100&fl=*%2Cscore&q=' + expand_search);\n            const items = await data.json();\n            console.log(items.response.docs);\n            setSearchResult(items.response.docs);\n        } catch (err) {\n            console.log(err);\n        }\n\n    };\n\n    const searchChangeHandler = (event) => {\n        setSearch(event.target.value);\n    }\n    \n    useEffect(async () => {\n        try {\n            let data = await fetch('http://localhost:8983/solr/briwtest/suggest?suggest=true&suggest.build=true&suggest.dictionary=default&wt=json&suggest.q=' + search);\n            const result = await data.json();\n            console.log(search);\n            console.log(result.suggest.default[search].suggestions);\n            setSuggests(result.suggest.default[search].suggestions)\n        } catch (err) {\n            console.log(err);\n        }\n    }, [search]);\n\n    const SubmitHandler = (event) => {\n        event.preventDefault();\n        fetchSearch(search)\n    }\n\n    return (\n        <div>\n            <div className=\"container mt-5\">\n                <h1 className=\"animate__animated animate__bounceInLeft animate__delay-.5s text-center\">BRIW</h1>\n            </div>\n            <div className=\"container mt-5 mx-auto\" style={{ width: \"800px\" }}>\n\n                <div className=\"container-fluid\">\n                    <form className=\"d-flex\" onSubmit={SubmitHandler}>\n                        <input className=\"form-control \" list=\"datalistOptions\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" value={search} onChange={searchChangeHandler} />\n                        <datalist id=\"datalistOptions\">\n                            {suggests.map(suggest => (\n                                <option value={suggest.term} />\n                            ))}\n                        </datalist>\n                        <button className=\"btn btn-outline-primary\" type='submit' >Search</button>\n                    </form>\n                </div>\n            </div>\n\n            <div className=\"container mt-2\" style={{ width: \"700px\" }}>\n                {expandWords.map((word,key) => (\n                    <a key={key} href=\"#\" className=\"btn btn-secondary btn-sm disabled mt-1 ml-2\" role=\"button\" aria-disabled=\"true\">{word.word}</a>\n                ))}\n            </div>\n\n            <div className=\"container mt-2\" style={{ width: \"700px\" }}>\n                {!spell.length ? '' : <div className=\"card\">\n                    <div className=\"card-body\">\n                        Quizás quisiste decir: {spell.map((item) => (item.word + ' '))}\n                    </div>\n                </div>\n                }\n            </div>\n            {!searchResult.length ? '' : <div className=\"container mt-2\" style={{ width: \"700px\" }}>\n                <h3 className=\"animate__animated animate__bounceInLeft animate__delay-.1s\" >Resultados</h3>\n            </div>}\n\n            {searchResult.map(doc => (\n                <div key={doc.id} className=\"container-sm mt-2 mx-auto\" style={{ width: \"700px\" }} >\n                    <div className=\"list-group\">\n                        <a href={doc.link} className=\"list-group-item list-group-item-action \" aria-current=\"true\">\n                            <div className=\"d-flex w-100 justify-content-between\">\n                                <h5 className=\"mb-1\">{doc.titulo_es[0]}</h5>\n                            </div>\n                            <p className=\"mb-1\">{doc.snippet[0]}</p>\n                            <small>score: {doc.score}</small>\n                        </a>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n}\nexport default Home;","/Users/diegoburgos/Desktop/front/src/components/nav.js",[],"/Users/diegoburgos/Desktop/front/src/views/Crawler.js",["34","35","36","37"],"import React, { useState, useEffect } from \"react\";\nimport { MdDeleteForever } from \"react-icons/md\";\nimport { GrAdd } from \"react-icons/gr\";\nimport { AiOutlineSave } from \"react-icons/ai\";\nimport { GoX } from \"react-icons/go\";\nimport { Link } from \"react-router-dom\";\nimport './Crawler.css';\n\n\n\nfunction Crawler() {\n  const [links, setLinks] = useState([]);\n  const [addNewLink, setNewLink] = useState(false);\n  const [inputLink, setInputLink] = useState('');\n  const [crawler, setCrawler] = useState(false);\n  const [facet,setFacer]=useState('')\n  useEffect(async () => {\n    try {\n      const result = await getLinks();\n      setLinks(result);\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n\n  const getLinks = async () => {\n    let data = await fetch(\"http://localhost/crawler/links/links.php\");\n    const result = await data.json();\n    console.log(result);\n    return result;\n  };\n  const updateLinks = async (data) => {\n    console.log(data);\n    let res = await fetch(\"http://localhost/crawler/links/saveLinks.php\", {\n      method: \"POST\", // or 'PUT'\n      body: JSON.stringify({\"links\":data}), // data can be `string` or {object}!\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n    });\n    let result=await res.json();\n    console.log(result);\n    return res;\n  };\n  const deleteLinkById = async (id) => {\n    const cloneLinks = [...links];\n    console.log(id);\n    cloneLinks.splice(id, 1);\n    await updateLinks(cloneLinks);\n    let result=await getLinks();\n    setLinks(result);\n  };\n\n  const NewLink = () => {\n  \n    setNewLink(true);\n  };\n\n  \n  const saveNewLink=async(value)=>{\n    const cloneLinks = [...links];\n    cloneLinks.push(inputLink);\n    await updateLinks(cloneLinks);\n    let result=await getLinks();\n    setLinks(result);\n    setInputLink('');\n  }\n  const ChangeInputHandler = (event) => {\n    setInputLink(event.target.value);\n}\nconst startCrawler=async()=>{\n  setCrawler(true);\n  let result;\n  try{\n    let data = await fetch(\"http://localhost/crawler/executeCrawler.php\");\n    result= await data.json();\n    console.log(result);\n    setCrawler(false);\n  }catch(err){\n    setCrawler(false);\n    console.log(err);\n  }\n \n  return result;\n  \n}\n return (\n    <div className=\"container mt-5\">\n      <h1 className=\"animate__animated animate__bounceInLeft animate__delay-.5s text-center\">\n        Crawler\n      </h1>\n      <div className=\"container mt-5 mx-auto\" style={{ width: \"800px\" }}>\n        <div className=\"card\">\n          <h5 className=\"card-tittle mx-auto\">Lista de links</h5>\n          <div className=\"Card-body p-3\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Link</th>\n                  <th scope=\"col\">Delete</th>\n                </tr>\n              </thead>\n              {links.map((link, key) => (\n                <tbody key={key}>\n                  <tr>\n                    <th style={{ verticalAlign: \"middle\" }} scope=\"row\">\n                      {key}\n                    </th>\n                    <td style={{ verticalAlign: \"middle\" }}>{link}</td>\n                    <td\n                      style={{ verticalAlign: \"middle\", textAlign: \"center\" }}\n                    >\n                      <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"button\"\n                        onClick={() => deleteLinkById(key)}\n                      >\n                        <MdDeleteForever />\n                      </button>\n                    </td>\n                  </tr>\n                </tbody>\n              ))}\n            </table>\n            {addNewLink ? (\n              <div className=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"New Link\"\n                  value={inputLink}\n                  onChange={ChangeInputHandler}\n                />\n                <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={()=>{saveNewLink()}}>\n                  <AiOutlineSave />\n                </button>\n                <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={()=>{setNewLink(false)}}>\n                  <GoX />\n                </button>\n              </div>\n            ) : (\n              \"\"\n            )}\n            <div style={{ margin: \"auto\", textAlign: \"center\" }}>\n              <button\n                onClick={() => NewLink()}\n                className=\"btn btn-outline-secondary\"\n                type=\"button\"\n                style={{ minWidth:\"500px\",width:'100%'}} \n              >\n                <GrAdd style={{ minWidth:\"500px\",width:'100%'}} />\n              </button>\n              \n            </div>\n            <div className=\"mt-5\" style={{ margin: \"auto\", textAlign: \"center\" }}>\n              <button\n                onClick={() => startCrawler()}\n                className=\"btn btn-outline-secondary animate__animated animate__bounce animate__repeat-2\"\n                type=\"button\"\n                style={{ minWidth:\"500px\",width:'100%'}} \n              >\n                Start Crawler\n              </button>\n              \n            </div>\n            {crawler?<div className=\"d-flex justify-content-center mt-3\">\n            <div className=\"spinner-border\" role=\"status\">\n            </div>\n          </div>:''}\n            \n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Crawler;\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":38,"nodeType":"44","messageId":"45","endLine":1,"endColumn":44},{"ruleId":"46","severity":1,"message":"47","line":59,"column":15,"nodeType":"48","endLine":69,"endColumn":6},{"ruleId":"49","severity":1,"message":"50","line":98,"column":21,"nodeType":"51","endLine":98,"endColumn":134},{"ruleId":"42","severity":1,"message":"52","line":6,"column":10,"nodeType":"44","messageId":"45","endLine":6,"endColumn":14},{"ruleId":"42","severity":1,"message":"53","line":16,"column":10,"nodeType":"44","messageId":"45","endLine":16,"endColumn":15},{"ruleId":"42","severity":1,"message":"54","line":16,"column":16,"nodeType":"44","messageId":"45","endLine":16,"endColumn":24},{"ruleId":"46","severity":1,"message":"47","line":17,"column":13,"nodeType":"48","endLine":24,"endColumn":4},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Link' is defined but never used.","'facet' is assigned a value but never used.","'setFacer' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]